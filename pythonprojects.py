{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0a65a05a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import tkinter as tk\n",
    "from tkinter import messagebox\n",
    "from datetime import datetime\n",
    "\n",
    "# File where expenses will be saved\n",
    "FILE_PATH = \"expenses.csv\"\n",
    "\n",
    "# Initialize or load the DataFrame\n",
    "try:\n",
    "    df = pd.read_csv(FILE_PATH)\n",
    "except FileNotFoundError:\n",
    "    # Create an empty DataFrame if file does not exist\n",
    "    df = pd.DataFrame(columns=['Date', 'Category', 'Amount'])\n",
    "\n",
    "# Function to add expense\n",
    "def add_expense():\n",
    "    day = entry_day.get()\n",
    "    month = entry_month.get()\n",
    "    year = entry_year.get()\n",
    "    category = entry_category.get()\n",
    "\n",
    "    # Validate amount input\n",
    "    try:\n",
    "        amount = float(entry_amount.get())\n",
    "    except ValueError:\n",
    "        messagebox.showerror(\"Invalid Input\", \"Please enter a valid amount.\")\n",
    "        return\n",
    "\n",
    "    # Combine date fields into YYYY-MM-DD format\n",
    "    try:\n",
    "        date = f\"{year}-{month.zfill(2)}-{day.zfill(2)}\"\n",
    "        datetime.strptime(date, \"%Y-%m-%d\")  # Validate date format\n",
    "    except ValueError:\n",
    "        messagebox.showerror(\"Invalid Date\", \"Please enter a valid date.\")\n",
    "        return\n",
    "\n",
    "    # Append data to the DataFrame using pandas.concat\n",
    "    global df\n",
    "    new_row = pd.DataFrame({'Date': [date], 'Category': [category], 'Amount': [amount]})\n",
    "    df = pd.concat([df, new_row], ignore_index=True)\n",
    "\n",
    "    # Save the updated DataFrame to CSV\n",
    "    df.to_csv(FILE_PATH, index=False)\n",
    "\n",
    "    # Clear the input fields\n",
    "    entry_day.delete(0, tk.END)\n",
    "    entry_month.delete(0, tk.END)\n",
    "    entry_year.delete(0, tk.END)\n",
    "    entry_category.delete(0, tk.END)\n",
    "    entry_amount.delete(0, tk.END)\n",
    "\n",
    "    # Update summary display\n",
    "    update_summary()\n",
    "    messagebox.showinfo(\"Expense Added\", \"Your expense has been added successfully!\")\n",
    "\n",
    "# Function to update summary display\n",
    "def update_summary():\n",
    "    if not df.empty:\n",
    "        total_expense = df['Amount'].sum()\n",
    "        category_summary = df.groupby('Category')['Amount'].sum()\n",
    "\n",
    "        summary_text = f\"Total Expenses: \\u20B9{total_expense:.2f}\\n\\n\"\n",
    "        summary_text += \"Expenses by Category:\\n\"\n",
    "        for category, amount in category_summary.items():\n",
    "            summary_text += f\"{category}: \\u20B9{amount:.2f}\\n\"\n",
    "    else:\n",
    "        summary_text = \"No expenses to show.\"\n",
    "\n",
    "    label_summary.config(text=summary_text)\n",
    "\n",
    "# Initialize Tkinter window\n",
    "root = tk.Tk()\n",
    "root.title(\"Expense Tracker\")\n",
    "\n",
    "# Create input fields and labels\n",
    "tk.Label(root, text=\"Date (DD MM YYYY):\").grid(row=0, column=0, padx=10, pady=5, sticky=\"e\")\n",
    "entry_day = tk.Entry(root, width=4)\n",
    "entry_day.grid(row=0, column=1, padx=2, pady=5, sticky=\"w\")\n",
    "entry_month = tk.Entry(root, width=4)\n",
    "entry_month.grid(row=0, column=1, padx=40, pady=5, sticky=\"w\")\n",
    "entry_year = tk.Entry(root, width=6)\n",
    "entry_year.grid(row=0, column=1, padx=80, pady=5, sticky=\"w\")\n",
    "\n",
    "tk.Label(root, text=\"Category:\").grid(row=1, column=0, padx=10, pady=5, sticky=\"e\")\n",
    "entry_category = tk.Entry(root, width=20)\n",
    "entry_category.grid(row=1, column=1, padx=10, pady=5)\n",
    "\n",
    "tk.Label(root, text=\"Amount:\").grid(row=2, column=0, padx=10, pady=5, sticky=\"e\")\n",
    "entry_amount = tk.Entry(root, width=20)\n",
    "entry_amount.grid(row=2, column=1, padx=10, pady=5)\n",
    "\n",
    "# Add button to submit expense\n",
    "btn_add = tk.Button(root, text=\"Add Expense\", command=add_expense)\n",
    "btn_add.grid(row=3, column=0, columnspan=2, pady=10)\n",
    "\n",
    "# Label for displaying summary\n",
    "label_summary = tk.Label(root, text=\"\", justify=\"left\", font=(\"Arial\", 10))\n",
    "label_summary.grid(row=4, column=0, columnspan=2, padx=10, pady=10)\n",
    "\n",
    "# Initialize summary display\n",
    "update_summary()\n",
    "\n",
    "# Run the Tkinter event loop\n",
    "root.mainloop()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5a1bfdd1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter as tk\n",
    "\n",
    "def evaluate_expression():\n",
    "    try:\n",
    "        expression = entry.get()\n",
    "        result = str(eval(expression))\n",
    "        entry.delete(0, tk.END)\n",
    "        entry.insert(tk.END, result)\n",
    "    except Exception as e:\n",
    "        # In case of error\n",
    "        entry.delete(0, tk.END)\n",
    "        entry.insert(tk.END, \"Error\")\n",
    "\n",
    "def append_to_expression(char):\n",
    "    entry.insert(tk.END, char)\n",
    "\n",
    "def clear_expression():\n",
    "    entry.delete(0, tk.END)\n",
    "\n",
    "root = tk.Tk()\n",
    "root.title(\"Calculator\")\n",
    "\n",
    "entry = tk.Entry(root, width=16, font=('Arial', 24), borderwidth=2, relief=\"solid\", justify=\"right\")\n",
    "entry.grid(row=0, column=0, columnspan=4)\n",
    "\n",
    "buttons = [\n",
    "    ('7', 1, 0), ('8', 1, 1), ('9', 1, 2), ('/', 1, 3),\n",
    "    ('4', 2, 0), ('5', 2, 1), ('6', 2, 2), ('*', 2, 3),\n",
    "    ('1', 3, 0), ('2', 3, 1), ('3', 3, 2), ('-', 3, 3),\n",
    "    ('0', 4, 0), ('.', 4, 1), ('+', 4, 2), ('=', 4, 3),\n",
    "    ('C', 5, 0)  # Clear button\n",
    "]\n",
    "\n",
    "for (text, row, col) in buttons:\n",
    "    if text == '=':\n",
    "        btn = tk.Button(root, text=text, width=5, height=2, font=('Arial', 18),\n",
    "                        command=evaluate_expression)\n",
    "    elif text == 'C':\n",
    "        btn = tk.Button(root, text=text, width=5, height=2, font=('Arial', 18),\n",
    "                        command=clear_expression)\n",
    "    else:\n",
    "        btn = tk.Button(root, text=text, width=5, height=2, font=('Arial', 18),\n",
    "                        command=lambda t=text: append_to_expression(t))\n",
    "    \n",
    "    btn.grid(row=row, column=col, sticky=\"nsew\")\n",
    "\n",
    "for i in range(6):\n",
    "    root.grid_rowconfigure(i, weight=1)\n",
    "    root.grid_columnconfigure(i % 4, weight=1)\n",
    "\n",
    "# Run the Tkinter event loop\n",
    "root.mainloop()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "46404e81",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter as tk\n",
    "from tkinter import messagebox, filedialog\n",
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "import pandas as pd\n",
    "\n",
    "def scrape_data():\n",
    "    url = entry_url.get()\n",
    "    html_tag = entry_tag.get()\n",
    "    html_class = entry_class.get()\n",
    "    \n",
    "    if not url or not html_tag:\n",
    "        messagebox.showerror(\"Input Error\", \"Please provide both URL and HTML Tag.\")\n",
    "        return\n",
    "\n",
    "    try:\n",
    "        # fetch webpage content\n",
    "        response = requests.get(url)\n",
    "        if response.status_code != 200:\n",
    "            messagebox.showerror(\"Error\", f\"Failed to fetch the webpage. Status code: {response.status_code}\")\n",
    "            return\n",
    "\n",
    "        # parse HTML content\n",
    "        soup = BeautifulSoup(response.content, 'html.parser')\n",
    "\n",
    "        # find elements based on tag and class\n",
    "        if html_class:\n",
    "            elements = soup.find_all(html_tag, class_=html_class)\n",
    "        else:\n",
    "            elements = soup.find_all(html_tag)\n",
    "\n",
    "        # extract text from elements\n",
    "        data = [element.get_text(strip=True) for element in elements]\n",
    "\n",
    "        # update results in the GUI\n",
    "        text_results.delete(\"1.0\", tk.END)\n",
    "        text_results.insert(tk.END, \"\\n\".join(data))\n",
    "\n",
    "        # save data for later use\n",
    "        global scraped_data\n",
    "        scraped_data = data\n",
    "\n",
    "        messagebox.showinfo(\"Success\", f\"Scraped {len(data)} items from the webpage.\")\n",
    "    except Exception as e:\n",
    "        messagebox.showerror(\"Error\", f\"An error occurred: {e}\")\n",
    "\n",
    "# function to save scraped data to CSV\n",
    "def save_to_csv():\n",
    "    if not scraped_data:\n",
    "        messagebox.showwarning(\"No Data\", \"No data to save. Please scrape data first.\")\n",
    "        return\n",
    "\n",
    "    # prompt user to choose a file location\n",
    "    file_path = filedialog.asksaveasfilename(\n",
    "        defaultextension=\".csv\",\n",
    "        filetypes=[(\"CSV Files\", \"*.csv\"), (\"All Files\", \"*.*\")]\n",
    "    )\n",
    "\n",
    "    if file_path:\n",
    "        try:\n",
    "            # Save data to CSV\n",
    "            df = pd.DataFrame(scraped_data, columns=[\"Scraped Data\"])\n",
    "            df.to_csv(file_path, index=False)\n",
    "            messagebox.showinfo(\"Success\", f\"Data saved to {file_path}\")\n",
    "        except Exception as e:\n",
    "            messagebox.showerror(\"Error\", f\"Failed to save data: {e}\")\n",
    "\n",
    "root = tk.Tk()\n",
    "root.title(\"Web Scraper\")\n",
    "\n",
    "scraped_data = []\n",
    "\n",
    "# input fields\n",
    "tk.Label(root, text=\"URL:\").grid(row=0, column=0, padx=10, pady=5, sticky=\"e\")\n",
    "entry_url = tk.Entry(root, width=50)\n",
    "entry_url.grid(row=0, column=1, padx=10, pady=5)\n",
    "\n",
    "tk.Label(root, text=\"HTML Tag:\").grid(row=1, column=0, padx=10, pady=5, sticky=\"e\")\n",
    "entry_tag = tk.Entry(root, width=20)\n",
    "entry_tag.grid(row=1, column=1, padx=10, pady=5, sticky=\"w\")\n",
    "\n",
    "tk.Label(root, text=\"Class Name (Optional):\").grid(row=2, column=0, padx=10, pady=5, sticky=\"e\")\n",
    "entry_class = tk.Entry(root, width=20)\n",
    "entry_class.grid(row=2, column=1, padx=10, pady=5, sticky=\"w\")\n",
    "\n",
    "# buttons\n",
    "btn_scrape = tk.Button(root, text=\"Scrape\", command=scrape_data)\n",
    "btn_scrape.grid(row=3, column=0, columnspan=2, pady=10)\n",
    "\n",
    "btn_save = tk.Button(root, text=\"Save to CSV\", command=save_to_csv)\n",
    "btn_save.grid(row=4, column=0, columnspan=2, pady=10)\n",
    "\n",
    "# results display\n",
    "tk.Label(root, text=\"Scraped Data:\").grid(row=5, column=0, padx=10, pady=5, sticky=\"nw\")\n",
    "text_results = tk.Text(root, wrap=\"word\", height=15, width=60)\n",
    "text_results.grid(row=5, column=1, padx=10, pady=5)\n",
    "\n",
    "root.mainloop()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "891bf8bb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset Preview:\n",
      "   Id  SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm      Species\n",
      "0   1            5.1           3.5            1.4           0.2  Iris-setosa\n",
      "1   2            4.9           3.0            1.4           0.2  Iris-setosa\n",
      "2   3            4.7           3.2            1.3           0.2  Iris-setosa\n",
      "3   4            4.6           3.1            1.5           0.2  Iris-setosa\n",
      "4   5            5.0           3.6            1.4           0.2  Iris-setosa\n",
      "\n",
      "Mean of numeric columns:\n",
      " Id               75.500000\n",
      "SepalLengthCm     5.843333\n",
      "SepalWidthCm      3.054000\n",
      "PetalLengthCm     3.758667\n",
      "PetalWidthCm      1.198667\n",
      "dtype: float64\n",
      "\n",
      "Median of numeric columns:\n",
      " Id               75.50\n",
      "SepalLengthCm     5.80\n",
      "SepalWidthCm      3.00\n",
      "PetalLengthCm     4.35\n",
      "PetalWidthCm      1.30\n",
      "dtype: float64\n",
      "\n",
      "Mode of numeric columns:\n",
      " Id               1.0\n",
      "SepalLengthCm    5.0\n",
      "SepalWidthCm     3.0\n",
      "PetalLengthCm    1.5\n",
      "PetalWidthCm     0.2\n",
      "Name: 0, dtype: float64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# loading the dataset\n",
    "df = pd.read_csv('Iris.csv')\n",
    "\n",
    "# preview data\n",
    "print(\"Dataset Preview:\")\n",
    "print(df.head())\n",
    "\n",
    "numeric_df = df.select_dtypes(include=[np.number])\n",
    "\n",
    "# basic statistics\n",
    "mean = numeric_df.mean()\n",
    "median = numeric_df.median()\n",
    "mode = numeric_df.mode().iloc[0]  # mode() can return multiple modes, select the first row\n",
    "\n",
    "print(\"\\nMean of numeric columns:\\n\", mean)\n",
    "print(\"\\nMedian of numeric columns:\\n\", median)\n",
    "print(\"\\nMode of numeric columns:\\n\", mode)\n",
    "\n",
    "# plot histograms for each numeric column\n",
    "for column in numeric_df.columns:\n",
    "    plt.figure(figsize=(6, 4))\n",
    "    plt.hist(numeric_df[column], bins=20, color='skyblue', edgecolor='black')\n",
    "    plt.title(f'Histogram of {column}')\n",
    "    plt.xlabel(column)\n",
    "    plt.ylabel('Frequency')\n",
    "    plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a139007a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
